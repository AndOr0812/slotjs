!function(Q){var U={};function F(B){if(U[B])return U[B].exports;var s=U[B]={i:B,l:!1,exports:{}};return Q[B].call(s.exports,s,s.exports,F),s.l=!0,s.exports}F.m=Q,F.c=U,F.d=function(Q,U,B){F.o(Q,U)||Object.defineProperty(Q,U,{enumerable:!0,get:B})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,U){if(1&U&&(Q=F(Q)),8&U)return Q;if(4&U&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&U&&"string"!=typeof Q)for(var s in Q)F.d(B,s,function(U){return Q[U]}.bind(null,s));return B},F.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(U,"a",U),U},F.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},F.p="./",F(F.s=0)}([function(Q,U,F){F(3),Q.exports=F(2)},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NvbXBvbmVudHMvc2xvdC1tYWNoaW5lL3Nsb3QtbWFjaGluZS5zdHlsZS5zY3NzP2Q0ODciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL21haW4uc2Nzcz85NDM1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/app/utils/dom.util.js\nfunction createElement() {\n  var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var angle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var element = document.createElement('DIV');\n  element.className = className;\n\n  if (typeof content === 'string') {\n    element.innerText = content;\n  } else {\n    element.appendChild(content);\n  }\n\n  if (angle !== null) {\n    element.style.transform = \"rotate(\".concat(angle, \"deg)\");\n  }\n\n  return element;\n}\n// CONCATENATED MODULE: ./src/app/utils/animation.util.js\nvar dynamicStyles = null;\nfunction addAnimation(name, body) {\n  if (!dynamicStyles) {\n    dynamicStyles = document.createElement('style');\n    dynamicStyles.type = 'text/css';\n    document.head.appendChild(dynamicStyles);\n  }\n\n  dynamicStyles.sheet.insertRule(\"@keyframes \".concat(name, \" {\\n        \").concat(body, \"\\n    }\"), dynamicStyles.length);\n}\nfunction resetAnimations() {\n  if (dynamicStyles) {\n    dynamicStyles.remove();\n    dynamicStyles = null;\n  }\n}\nfunction stopAt(name, start, end, alpha, speed) {\n  var angles = [start, end - alpha * 0.25, end + alpha * 0.125, end - alpha * 0.0625, end + alpha * 0.03125, end - alpha * 0.015625, end];\n  var previousAngle = start;\n  var total = 0;\n  var time = angles.map(function (angle) {\n    var delta = Math.max(Math.abs(angle - previousAngle) / Math.abs(speed), 10);\n    previousAngle = angle;\n    total += delta;\n    return delta;\n  });\n  var previousPercent = 0;\n  var percent = time.map(function (t) {\n    var p = previousPercent + 100 * (t / total);\n    previousPercent = p;\n    return p;\n  }); // TODO: Handle opacity here!\n\n  var animation = percent.map(function (p, i) {\n    return \"\".concat(Math.round(p), \"% { transform: rotate(\").concat(angles[i].toFixed(2), \"deg); }\");\n  }).join('\\n');\n  addAnimation(name, animation);\n  return total;\n}\n// CONCATENATED MODULE: ./src/app/utils/array.util.js\nfunction shuffle(a) {\n  for (var i = a.length - 1; i > 0; --i) {\n    var j = Math.floor(Math.random() * (i + 1)); // eslint-disable-next-line no-param-reassign\n\n    var _ref = [a[j], a[i]];\n    a[i] = _ref[0];\n    a[j] = _ref[1];\n  }\n\n  return a;\n}\n// CONCATENATED MODULE: ./src/app/constants/browser.constants.js\nvar IS_IOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n// CONCATENATED MODULE: ./src/app/constants/symbols.constants.js\nvar SYMBOLS_CLASSIC = ['💀', '🍋', '🍊', '🍉', '🍇', '🍓', '🍒', '🔔', '🍀', '💎'];\nvar SYMBOLS_CHRISTMAS = ['⛄', '🦌', '🎄', '🎀', '🎁', '🎆', '🍾', '🔔', '🎅', '🌟'];\nvar SYMBOLS_HALLOWEEN = ['🌚', '🐺', '🎃', '🧠', '👹', '👽', '👻', '🧟‍', '🧛‍', '💀'];\nvar SYMBOLS_ANIMALS = ['🐭', '🐱', '🦀', '🐞', '🐓', '🐍', '🐟', '🐸', '🦊‍', '🦁'];\nvar SYMBOLS_SPORTS = ['⚽', '🏀', '🏈', '⚾', '🎾', '🏐', '🏉', '🎱', '🥊‍', '🎯'];\nvar ALL_SYMBOLS = [SYMBOLS_CLASSIC, SYMBOLS_CHRISTMAS, SYMBOLS_HALLOWEEN, SYMBOLS_ANIMALS, SYMBOLS_SPORTS];\nvar SYMBOLS_RANDOM = ALL_SYMBOLS[Math.random() * ALL_SYMBOLS.length | 0];\n// CONCATENATED MODULE: ./src/app/constants/vibration.constants.js\nvar VIBRATION_STOP = [200, 50, 50, 50, 50, 25, 25, 25, 25, 25, 25, 25, 25];\nvar VIBRATION_START = [25, 25, 25, 25, 25, 25, 25, 25, 50, 50, 50, 50, 50];\n// EXTERNAL MODULE: ./src/app/components/slot-machine/slot-machine.style.scss\nvar slot_machine_style = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/app/components/slot-machine/slot-machine.component.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\n\nvar slot_machine_component_SlotMachine =\n/*#__PURE__*/\nfunction () {\n  // Elements:\n  // Visual config:\n  // State:\n  function SlotMachine() {\n    var _this = this;\n\n    _classCallCheck(this, SlotMachine);\n\n    this.root = document.querySelector(SlotMachine.SELECTOR_BASE);\n    this.display = document.querySelector(SlotMachine.SELECTOR_DISPLAY);\n    this.reels = [];\n    this.shadows = [4, 3, 3, 2, 1];\n    this.symbols = _toConsumableArray(SYMBOLS_RANDOM);\n    this.alpha = 360 / SYMBOLS_RANDOM.length;\n    this.currentReel = null;\n    this.speed = -0.75;\n    this.lastUpdate = 0;\n    this.init();\n\n    if (IS_IOS) {\n      var tap = false;\n\n      document.ontouchstart = function () {\n        tap = true;\n      };\n\n      document.ontouchmove = function () {\n        tap = false;\n      };\n\n      document.ontouchend = function () {\n        return tap && _this.handleClick();\n      };\n    } else {\n      document.onclick = this.handleClick.bind(this);\n    }\n  }\n\n  _createClass(SlotMachine, [{\n    key: \"init\",\n    value: function init() {\n      var alpha = this.alpha,\n          shadows = this.shadows,\n          symbols = this.symbols;\n      this.reels = Array.from(document.querySelectorAll(SlotMachine.SELECTOR_REEL)).slice(0, -1).map(function (reel, ireel) {\n        shuffle(symbols);\n        symbols.forEach(function (symbol, isymbol) {\n          var slotText = createElement('sm__cellFigure', symbol);\n          var slot = createElement('sm__cell', slotText, isymbol * alpha);\n          reel.appendChild(slot);\n          var totalShadows = shadows[ireel];\n          var beta = 1 / (totalShadows + 1);\n\n          for (var ishadow = 1; ishadow <= totalShadows; ++ishadow) {\n            reel.appendChild(createElement(\"sm__cell sm__shadow sm__shadow-\".concat(ishadow), slotText.cloneNode(true), (isymbol + beta * ishadow) * alpha));\n          }\n        });\n        return {\n          element: reel,\n          style: reel.style,\n          angle: 0\n        };\n      });\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this2 = this;\n\n      var reels = this.reels,\n          root = this.root;\n      resetAnimations();\n      reels.map(function (reel) {\n        return reel.element.classList.remove('is-stop');\n      });\n      root.style = '';\n      this.currentReel = 0;\n      this.lastUpdate = performance.now();\n      window.navigator.vibrate(VIBRATION_START);\n      requestAnimationFrame(function () {\n        return _this2.tick();\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.currentReel = null; // TODO: 32 is a css variable!\n\n      this.root.style.transform = \"scale(\".concat((window.innerWidth - 32) / this.display.offsetWidth, \")\"); // TODO: Check win\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      var _this3 = this;\n\n      var reels = this.reels,\n          speed = this.speed,\n          currentReel = this.currentReel,\n          lastUpdate = this.lastUpdate;\n      var now = performance.now();\n      var deltaTime = now - lastUpdate;\n      var deltaAlpha = deltaTime * speed;\n\n      if (currentReel === null) {\n        return;\n      }\n\n      this.lastUpdate = now;\n\n      for (var i = reels.length - 1; i >= currentReel; --i) {\n        var reel = reels[i];\n        var angle = reel.angle = (360 + (reel.angle + deltaAlpha)) % 360;\n        reel.style.transform = \"rotate(\".concat(angle, \"deg)\");\n      }\n\n      requestAnimationFrame(function () {\n        return _this3.tick();\n      });\n    }\n  }, {\n    key: \"stopReel\",\n    value: function stopReel(reelIndex) {\n      var alpha = this.alpha,\n          speed = this.speed;\n      var deltaAlpha = (performance.now() - this.lastUpdate) * speed;\n      var reel = this.reels[reelIndex];\n      var angle = (360 - reel.angle - deltaAlpha) % 360;\n      var index = Math.ceil(angle / alpha);\n      var stopAngle = index * alpha;\n      var animationName = \"stop-\".concat(reelIndex);\n      var animationDuration = stopAt(animationName, (360 - angle) % 360, (360 - stopAngle) % 360, alpha, speed) * 5;\n      window.navigator.vibrate(VIBRATION_STOP);\n      reel.style.animation = \"\".concat(animationName, \" \").concat(animationDuration, \"ms ease-out forwards\");\n      reel.element.classList.add('is-stop');\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      var currentReel = this.currentReel;\n\n      if (currentReel === null) {\n        this.start();\n      } else {\n        ++this.currentReel;\n        this.stopReel(currentReel);\n\n        if (currentReel === this.reels.length - 1) {\n          this.stop();\n        }\n      }\n    }\n  }]);\n\n  return SlotMachine;\n}();\nslot_machine_component_SlotMachine.SELECTOR_BASE = '.sm__base';\nslot_machine_component_SlotMachine.SELECTOR_DISPLAY = '.sm__display';\nslot_machine_component_SlotMachine.SELECTOR_REEL = '.sm__reel';\n// CONCATENATED MODULE: ./src/app/main.js\n // eslint-disable-next-line no-new\n\nnew slot_machine_component_SlotMachine();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL3V0aWxzL2RvbS51dGlsLmpzPzdlMjMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC91dGlscy9hbmltYXRpb24udXRpbC5qcz8zYjUyIiwid2VicGFjazovLy8uL3NyYy9hcHAvdXRpbHMvYXJyYXkudXRpbC5qcz9hNGNkIiwid2VicGFjazovLy8uL3NyYy9hcHAvY29uc3RhbnRzL2Jyb3dzZXIuY29uc3RhbnRzLmpzP2M0ZjUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9jb25zdGFudHMvc3ltYm9scy5jb25zdGFudHMuanM/NjZmNiIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NvbnN0YW50cy92aWJyYXRpb24uY29uc3RhbnRzLmpzP2EwMTciLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9jb21wb25lbnRzL3Nsb3QtbWFjaGluZS9zbG90LW1hY2hpbmUuY29tcG9uZW50LmpzPzQ3Y2QiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9tYWluLmpzPzM2MzgiXSwibmFtZXMiOlsiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImNvbnRlbnQiLCJhbmdsZSIsImVsZW1lbnQiLCJkb2N1bWVudCIsImlubmVyVGV4dCIsImFwcGVuZENoaWxkIiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJkeW5hbWljU3R5bGVzIiwiYWRkQW5pbWF0aW9uIiwibmFtZSIsImJvZHkiLCJ0eXBlIiwiaGVhZCIsInNoZWV0IiwiaW5zZXJ0UnVsZSIsImxlbmd0aCIsInJlc2V0QW5pbWF0aW9ucyIsInJlbW92ZSIsInN0b3BBdCIsInN0YXJ0IiwiZW5kIiwiYWxwaGEiLCJzcGVlZCIsImFuZ2xlcyIsInByZXZpb3VzQW5nbGUiLCJ0b3RhbCIsInRpbWUiLCJtYXAiLCJkZWx0YSIsIk1hdGgiLCJtYXgiLCJhYnMiLCJwcmV2aW91c1BlcmNlbnQiLCJwZXJjZW50IiwidCIsInAiLCJhbmltYXRpb24iLCJpIiwicm91bmQiLCJ0b0ZpeGVkIiwiam9pbiIsInNodWZmbGUiLCJhIiwiaiIsImZsb29yIiwicmFuZG9tIiwiSVNfSU9TIiwibmF2aWdhdG9yIiwicGxhdGZvcm0iLCJ0ZXN0IiwiU1lNQk9MU19DTEFTU0lDIiwiU1lNQk9MU19DSFJJU1RNQVMiLCJTWU1CT0xTX0hBTExPV0VFTiIsIlNZTUJPTFNfQU5JTUFMUyIsIlNZTUJPTFNfU1BPUlRTIiwiQUxMX1NZTUJPTFMiLCJTWU1CT0xTX1JBTkRPTSIsIlZJQlJBVElPTl9TVE9QIiwiVklCUkFUSU9OX1NUQVJUIiwiU2xvdE1hY2hpbmUiLCJyb290IiwicXVlcnlTZWxlY3RvciIsIlNFTEVDVE9SX0JBU0UiLCJkaXNwbGF5IiwiU0VMRUNUT1JfRElTUExBWSIsInJlZWxzIiwic2hhZG93cyIsInN5bWJvbHMiLCJjdXJyZW50UmVlbCIsImxhc3RVcGRhdGUiLCJpbml0IiwidGFwIiwib250b3VjaHN0YXJ0Iiwib250b3VjaG1vdmUiLCJvbnRvdWNoZW5kIiwiaGFuZGxlQ2xpY2siLCJvbmNsaWNrIiwiYmluZCIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJTRUxFQ1RPUl9SRUVMIiwic2xpY2UiLCJyZWVsIiwiaXJlZWwiLCJmb3JFYWNoIiwic3ltYm9sIiwiaXN5bWJvbCIsInNsb3RUZXh0Iiwic2xvdCIsInRvdGFsU2hhZG93cyIsImJldGEiLCJpc2hhZG93IiwiY2xvbmVOb2RlIiwiY2xhc3NMaXN0IiwicGVyZm9ybWFuY2UiLCJub3ciLCJ3aW5kb3ciLCJ2aWJyYXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGljayIsImlubmVyV2lkdGgiLCJvZmZzZXRXaWR0aCIsImRlbHRhVGltZSIsImRlbHRhQWxwaGEiLCJyZWVsSW5kZXgiLCJpbmRleCIsImNlaWwiLCJzdG9wQW5nbGUiLCJhbmltYXRpb25OYW1lIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJhZGQiLCJzdG9wUmVlbCIsInN0b3AiXSwibWFwcGluZ3MiOiI7OztBQUFPLFNBQVNBLGFBQVQsR0FBbUU7QUFBQSxNQUE1Q0MsU0FBNEMs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SUEsV0FBVyxLQUFLLEtBQUtILEtBQUwsQ0FBV2xELE1BQVgsR0FBb0IsQ0FBeEMsRUFBMkM7QUFDdkMsZUFBS2tHLElBQUw7QUFDSDtBQUNKO0FBQ0o7QUFySkw7O0FBQUE7QUFBQTtBQUFhdEQsa0MsQ0FFRkcsYSxHQUFnQixXO0FBRmRILGtDLENBR0ZLLGdCLEdBQW1CLGM7QUFIakJMLGtDLENBSUZzQixhLEdBQWdCLFc7O0NDWDNCOztBQUNBLElBQUl0QixrQ0FBSiIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoY2xhc3NOYW1lID0gJycsIGNvbnRlbnQgPSAnJywgYW5nbGUgPSBudWxsKSB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcblxyXG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSBjbGFzc05hbWU7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGVsZW1lbnQuaW5uZXJUZXh0ID0gY29udGVudDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjb250ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYW5nbGUgIT09IG51bGwpIHtcclxuICAgICAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGByb3RhdGUoJHsgYW5nbGUgfWRlZylgO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlbGVtZW50O1xyXG59XHJcbiIsImxldCBkeW5hbWljU3R5bGVzID0gbnVsbDtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRBbmltYXRpb24obmFtZSwgYm9keSkge1xyXG4gICAgaWYgKCFkeW5hbWljU3R5bGVzKSB7XHJcbiAgICAgICAgZHluYW1pY1N0eWxlcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XHJcbiAgICAgICAgZHluYW1pY1N0eWxlcy50eXBlID0gJ3RleHQvY3NzJztcclxuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGR5bmFtaWNTdHlsZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGR5bmFtaWNTdHlsZXMuc2hlZXQuaW5zZXJ0UnVsZShgQGtleWZyYW1lcyAkeyBuYW1lIH0ge1xyXG4gICAgICAgICR7IGJvZHkgfVxyXG4gICAgfWAsIGR5bmFtaWNTdHlsZXMubGVuZ3RoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0QW5pbWF0aW9ucygpIHtcclxuICAgIGlmIChkeW5hbWljU3R5bGVzKSB7XHJcbiAgICAgICAgZHluYW1pY1N0eWxlcy5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgZHluYW1pY1N0eWxlcyA9IG51bGw7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdG9wQXQobmFtZSwgc3RhcnQsIGVuZCwgYWxwaGEsIHNwZWVkKSB7XHJcbiAgICBjb25zdCBhbmdsZXMgPSBbXHJcbiAgICAgICAgc3RhcnQsXHJcbiAgICAgICAgZW5kIC0gYWxwaGEgKiAwLjI1LFxyXG4gICAgICAgIGVuZCArIGFscGhhICogMC4xMjUsXHJcbiAgICAgICAgZW5kIC0gYWxwaGEgKiAwLjA2MjUsXHJcbiAgICAgICAgZW5kICsgYWxwaGEgKiAwLjAzMTI1LFxyXG4gICAgICAgIGVuZCAtIGFscGhhICogMC4wMTU2MjUsXHJcbiAgICAgICAgZW5kLFxyXG4gICAgXTtcclxuXHJcbiAgICBsZXQgcHJldmlvdXNBbmdsZSA9IHN0YXJ0O1xyXG4gICAgbGV0IHRvdGFsID0gMDtcclxuXHJcbiAgICBjb25zdCB0aW1lID0gYW5nbGVzLm1hcCgoYW5nbGUpID0+IHtcclxuICAgICAgICBjb25zdCBkZWx0YSA9IE1hdGgubWF4KE1hdGguYWJzKGFuZ2xlIC0gcHJldmlvdXNBbmdsZSkgLyBNYXRoLmFicyhzcGVlZCksIDEwKTtcclxuXHJcbiAgICAgICAgcHJldmlvdXNBbmdsZSA9IGFuZ2xlO1xyXG4gICAgICAgIHRvdGFsICs9IGRlbHRhO1xyXG5cclxuICAgICAgICByZXR1cm4gZGVsdGE7XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgcHJldmlvdXNQZXJjZW50ID0gMDtcclxuXHJcbiAgICBjb25zdCBwZXJjZW50ID0gdGltZS5tYXAoKHQpID0+IHtcclxuICAgICAgICBjb25zdCBwID0gcHJldmlvdXNQZXJjZW50ICsgMTAwICogKHQgLyB0b3RhbCk7XHJcblxyXG4gICAgICAgIHByZXZpb3VzUGVyY2VudCA9IHA7XHJcblxyXG4gICAgICAgIHJldHVybiBwO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gVE9ETzogSGFuZGxlIG9wYWNpdHkgaGVyZSFcclxuICAgIGNvbnN0IGFuaW1hdGlvbiA9IHBlcmNlbnQubWFwKChwLCBpKSA9PiBgJHsgTWF0aC5yb3VuZChwKSB9JSB7IHRyYW5zZm9ybTogcm90YXRlKCR7IGFuZ2xlc1tpXS50b0ZpeGVkKDIpIH1kZWcpOyB9YCkuam9pbignXFxuJyk7XHJcblxyXG4gICAgYWRkQW5pbWF0aW9uKG5hbWUsIGFuaW1hdGlvbik7XHJcblxyXG4gICAgcmV0dXJuIHRvdGFsO1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlKGEpIHtcclxuICAgIGZvciAobGV0IGkgPSBhLmxlbmd0aCAtIDE7IGkgPiAwOyAtLWkpIHtcclxuICAgICAgICBjb25zdCBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XHJcblxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxyXG4gICAgICAgIFthW2ldLCBhW2pdXSA9IFthW2pdLCBhW2ldXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYTtcclxufVxyXG4iLCJleHBvcnQgY29uc3QgSVNfSU9TID0gISFuYXZpZ2F0b3IucGxhdGZvcm0gJiYgL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKTtcclxuIiwiZXhwb3J0IGNvbnN0IFNZTUJPTFNfQ0xBU1NJQyA9IFtcclxuICAgICfwn5KAJywgJ/CfjYsnLCAn8J+NiicsICfwn42JJywgJ/CfjYcnLCAn8J+NkycsICfwn42SJywgJ/CflJQnLCAn8J+NgCcsICfwn5KOJ107XHJcblxyXG5leHBvcnQgY29uc3QgU1lNQk9MU19DSFJJU1RNQVMgPSBbXHJcbiAgICAn4puEJywgJ/CfpownLCAn8J+OhCcsICfwn46AJywgJ/CfjoEnLCAn8J+OhicsICfwn42+JywgJ/CflJQnLCAn8J+OhScsICfwn4yfJ107XHJcblxyXG5leHBvcnQgY29uc3QgU1lNQk9MU19IQUxMT1dFRU4gPSBbXHJcbiAgICAn8J+MmicsICfwn5C6JywgJ/CfjoMnLCAn8J+noCcsICfwn5G5JywgJ/Cfkb0nLCAn8J+RuycsICfwn6ef4oCNJywgJ/Cfp5vigI0nLCAn8J+SgCddO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNZTUJPTFNfQU5JTUFMUyA9IFtcclxuICAgICfwn5CtJywgJ/CfkLEnLCAn8J+mgCcsICfwn5CeJywgJ/CfkJMnLCAn8J+QjScsICfwn5CfJywgJ/CfkLgnLCAn8J+miuKAjScsICfwn6aBJ107XHJcblxyXG5leHBvcnQgY29uc3QgU1lNQk9MU19TUE9SVFMgPSBbXHJcbiAgICAn4pq9JywgJ/Cfj4AnLCAn8J+PiCcsICfimr4nLCAn8J+OvicsICfwn4+QJywgJ/Cfj4knLCAn8J+OsScsICfwn6WK4oCNJywgJ/Cfjq8nXTtcclxuXHJcbmV4cG9ydCBjb25zdCBBTExfU1lNQk9MUyA9IFtcclxuICAgIFNZTUJPTFNfQ0xBU1NJQyxcclxuICAgIFNZTUJPTFNfQ0hSSVNUTUFTLFxyXG4gICAgU1lNQk9MU19IQUxMT1dFRU4sXHJcbiAgICBTWU1CT0xTX0FOSU1BTFMsXHJcbiAgICBTWU1CT0xTX1NQT1JUUyxcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBTWU1CT0xTX1JBTkRPTSA9IEFMTF9TWU1CT0xTW01hdGgucmFuZG9tKCkgKiBBTExfU1lNQk9MUy5sZW5ndGggfCAwXTtcclxuIiwiZXhwb3J0IGNvbnN0IFZJQlJBVElPTl9TVE9QID0gWzIwMCwgNTAsIDUwLCA1MCwgNTAsIDI1LCAyNSwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyNV07XHJcblxyXG5leHBvcnQgY29uc3QgVklCUkFUSU9OX1NUQVJUID0gWzI1LCAyNSwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyNSwgNTAsIDUwLCA1MCwgNTAsIDUwXTtcclxuIiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4uLy4uL3V0aWxzL2RvbS51dGlsJztcclxuaW1wb3J0IHsgc3RvcEF0LCByZXNldEFuaW1hdGlvbnMgfSBmcm9tICcuLi8uLi91dGlscy9hbmltYXRpb24udXRpbCc7XHJcbmltcG9ydCB7IHNodWZmbGUgfSBmcm9tICcuLi8uLi91dGlscy9hcnJheS51dGlsJztcclxuaW1wb3J0IHsgSVNfSU9TIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL2Jyb3dzZXIuY29uc3RhbnRzJztcclxuaW1wb3J0IHsgU1lNQk9MU19SQU5ET00gfSBmcm9tICcuLi8uLi9jb25zdGFudHMvc3ltYm9scy5jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBWSUJSQVRJT05fU1RBUlQsIFZJQlJBVElPTl9TVE9QIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3ZpYnJhdGlvbi5jb25zdGFudHMnO1xyXG5cclxuaW1wb3J0ICcuL3Nsb3QtbWFjaGluZS5zdHlsZS5zY3NzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTbG90TWFjaGluZSB7XHJcblxyXG4gICAgc3RhdGljIFNFTEVDVE9SX0JBU0UgPSAnLnNtX19iYXNlJztcclxuICAgIHN0YXRpYyBTRUxFQ1RPUl9ESVNQTEFZID0gJy5zbV9fZGlzcGxheSc7XHJcbiAgICBzdGF0aWMgU0VMRUNUT1JfUkVFTCA9ICcuc21fX3JlZWwnO1xyXG5cclxuICAgIC8vIEVsZW1lbnRzOlxyXG4gICAgcm9vdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU2xvdE1hY2hpbmUuU0VMRUNUT1JfQkFTRSk7XHJcbiAgICBkaXNwbGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTbG90TWFjaGluZS5TRUxFQ1RPUl9ESVNQTEFZKTtcclxuICAgIHJlZWxzID0gW107XHJcblxyXG4gICAgLy8gVmlzdWFsIGNvbmZpZzpcclxuICAgIHNoYWRvd3MgPSBbNCwgMywgMywgMiwgMV07XHJcbiAgICBzeW1ib2xzID0gWy4uLlNZTUJPTFNfUkFORE9NXTtcclxuICAgIGFscGhhID0gMzYwIC8gU1lNQk9MU19SQU5ET00ubGVuZ3RoO1xyXG5cclxuICAgIC8vIFN0YXRlOlxyXG4gICAgY3VycmVudFJlZWwgPSBudWxsO1xyXG4gICAgc3BlZWQgPSAtMC43NTtcclxuICAgIGxhc3RVcGRhdGUgPSAwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG5cclxuICAgICAgICBpZiAoSVNfSU9TKSB7XHJcbiAgICAgICAgICAgIGxldCB0YXAgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGRvY3VtZW50Lm9udG91Y2hzdGFydCA9ICgpID0+IHsgdGFwID0gdHJ1ZTsgfTtcclxuICAgICAgICAgICAgZG9jdW1lbnQub250b3VjaG1vdmUgPSAoKSA9PiB7IHRhcCA9IGZhbHNlOyB9O1xyXG4gICAgICAgICAgICBkb2N1bWVudC5vbnRvdWNoZW5kID0gKCkgPT4gdGFwICYmIHRoaXMuaGFuZGxlQ2xpY2soKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5vbmNsaWNrID0gdGhpcy5oYW5kbGVDbGljay5iaW5kKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0KCkge1xyXG4gICAgICAgIGNvbnN0IHsgYWxwaGEsIHNoYWRvd3MsIHN5bWJvbHMgfSA9IHRoaXM7XHJcblxyXG4gICAgICAgIHRoaXMucmVlbHMgPSBBcnJheVxyXG4gICAgICAgICAgICAuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNsb3RNYWNoaW5lLlNFTEVDVE9SX1JFRUwpKVxyXG4gICAgICAgICAgICAuc2xpY2UoMCwgLTEpXHJcbiAgICAgICAgICAgIC5tYXAoKHJlZWwsIGlyZWVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzaHVmZmxlKHN5bWJvbHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHN5bWJvbHMuZm9yRWFjaCgoc3ltYm9sLCBpc3ltYm9sKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2xvdFRleHQgPSBjcmVhdGVFbGVtZW50KCdzbV9fY2VsbEZpZ3VyZScsIHN5bWJvbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2xvdCA9IGNyZWF0ZUVsZW1lbnQoJ3NtX19jZWxsJywgc2xvdFRleHQsIGlzeW1ib2wgKiBhbHBoYSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlZWwuYXBwZW5kQ2hpbGQoc2xvdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvdGFsU2hhZG93cyA9IHNoYWRvd3NbaXJlZWxdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJldGEgPSAxIC8gKHRvdGFsU2hhZG93cyArIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpc2hhZG93ID0gMTsgaXNoYWRvdyA8PSB0b3RhbFNoYWRvd3M7ICsraXNoYWRvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWVsLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgc21fX2NlbGwgc21fX3NoYWRvdyBzbV9fc2hhZG93LSR7IGlzaGFkb3cgfWAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG90VGV4dC5jbG9uZU5vZGUodHJ1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaXN5bWJvbCArIGJldGEgKiBpc2hhZG93KSAqIGFscGhhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBlbGVtZW50OiByZWVsLCBzdHlsZTogcmVlbC5zdHlsZSwgYW5nbGU6IDAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgY29uc3QgeyByZWVscywgcm9vdCB9ID0gdGhpcztcclxuXHJcbiAgICAgICAgcmVzZXRBbmltYXRpb25zKCk7XHJcblxyXG4gICAgICAgIHJlZWxzLm1hcChyZWVsID0+IHJlZWwuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zdG9wJykpO1xyXG4gICAgICAgIHJvb3Quc3R5bGUgPSAnJztcclxuXHJcbiAgICAgICAgdGhpcy5jdXJyZW50UmVlbCA9IDA7XHJcbiAgICAgICAgdGhpcy5sYXN0VXBkYXRlID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcblxyXG4gICAgICAgIHdpbmRvdy5uYXZpZ2F0b3IudmlicmF0ZShWSUJSQVRJT05fU1RBUlQpO1xyXG5cclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy50aWNrKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0b3AoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UmVlbCA9IG51bGw7XHJcblxyXG4gICAgICAgIC8vIFRPRE86IDMyIGlzIGEgY3NzIHZhcmlhYmxlIVxyXG4gICAgICAgIHRoaXMucm9vdC5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGUoJHsgKHdpbmRvdy5pbm5lcldpZHRoIC0gMzIpIC8gdGhpcy5kaXNwbGF5Lm9mZnNldFdpZHRoIH0pYDtcclxuXHJcbiAgICAgICAgLy8gVE9ETzogQ2hlY2sgd2luXHJcbiAgICB9XHJcblxyXG4gICAgdGljaygpIHtcclxuICAgICAgICBjb25zdCB7IHJlZWxzLCBzcGVlZCwgY3VycmVudFJlZWwsIGxhc3RVcGRhdGUgfSA9IHRoaXM7XHJcbiAgICAgICAgY29uc3Qgbm93ID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcbiAgICAgICAgY29uc3QgZGVsdGFUaW1lID0gbm93IC0gbGFzdFVwZGF0ZTtcclxuICAgICAgICBjb25zdCBkZWx0YUFscGhhID0gZGVsdGFUaW1lICogc3BlZWQ7XHJcblxyXG4gICAgICAgIGlmIChjdXJyZW50UmVlbCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxhc3RVcGRhdGUgPSBub3c7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSByZWVscy5sZW5ndGggLSAxOyBpID49IGN1cnJlbnRSZWVsOyAtLWkpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVlbCA9IHJlZWxzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBhbmdsZSA9IHJlZWwuYW5nbGUgPSAoMzYwICsgKHJlZWwuYW5nbGUgKyBkZWx0YUFscGhhKSkgJSAzNjA7XHJcblxyXG4gICAgICAgICAgICByZWVsLnN0eWxlLnRyYW5zZm9ybSA9IGByb3RhdGUoJHsgYW5nbGUgfWRlZylgO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMudGljaygpKTtcclxuICAgIH1cclxuXHJcbiAgICBzdG9wUmVlbChyZWVsSW5kZXgpIHtcclxuICAgICAgICBjb25zdCB7IGFscGhhLCBzcGVlZCB9ID0gdGhpcztcclxuICAgICAgICBjb25zdCBkZWx0YUFscGhhID0gKHBlcmZvcm1hbmNlLm5vdygpIC0gdGhpcy5sYXN0VXBkYXRlKSAqIHNwZWVkO1xyXG4gICAgICAgIGNvbnN0IHJlZWwgPSB0aGlzLnJlZWxzW3JlZWxJbmRleF07XHJcbiAgICAgICAgY29uc3QgYW5nbGUgPSAoMzYwIC0gcmVlbC5hbmdsZSAtIGRlbHRhQWxwaGEpICUgMzYwO1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gTWF0aC5jZWlsKGFuZ2xlIC8gYWxwaGEpO1xyXG4gICAgICAgIGNvbnN0IHN0b3BBbmdsZSA9IGluZGV4ICogYWxwaGE7XHJcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uTmFtZSA9IGBzdG9wLSR7IHJlZWxJbmRleCB9YDtcclxuICAgICAgICBjb25zdCBhbmltYXRpb25EdXJhdGlvbiA9IHN0b3BBdChcclxuICAgICAgICAgICAgYW5pbWF0aW9uTmFtZSxcclxuICAgICAgICAgICAgKDM2MCAtIGFuZ2xlKSAlIDM2MCxcclxuICAgICAgICAgICAgKDM2MCAtIHN0b3BBbmdsZSkgJSAzNjAsXHJcbiAgICAgICAgICAgIGFscGhhLFxyXG4gICAgICAgICAgICBzcGVlZCxcclxuICAgICAgICApICogNTtcclxuXHJcbiAgICAgICAgd2luZG93Lm5hdmlnYXRvci52aWJyYXRlKFZJQlJBVElPTl9TVE9QKTtcclxuXHJcbiAgICAgICAgcmVlbC5zdHlsZS5hbmltYXRpb24gPSBgJHsgYW5pbWF0aW9uTmFtZSB9ICR7IGFuaW1hdGlvbkR1cmF0aW9uIH1tcyBlYXNlLW91dCBmb3J3YXJkc2A7XHJcbiAgICAgICAgcmVlbC5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLXN0b3AnKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVDbGljaygpIHtcclxuICAgICAgICBjb25zdCB7IGN1cnJlbnRSZWVsIH0gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoY3VycmVudFJlZWwgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICsrdGhpcy5jdXJyZW50UmVlbDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc3RvcFJlZWwoY3VycmVudFJlZWwpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRSZWVsID09PSB0aGlzLnJlZWxzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgeyBTbG90TWFjaGluZSB9IGZyb20gJy4vY29tcG9uZW50cy9zbG90LW1hY2hpbmUvc2xvdC1tYWNoaW5lLmNvbXBvbmVudCc7XHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3XHJcbm5ldyBTbG90TWFjaGluZSgpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n")}]);