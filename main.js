!function(Q){var U={};function F(B){if(U[B])return U[B].exports;var s=U[B]={i:B,l:!1,exports:{}};return Q[B].call(s.exports,s,s.exports,F),s.l=!0,s.exports}F.m=Q,F.c=U,F.d=function(Q,U,B){F.o(Q,U)||Object.defineProperty(Q,U,{enumerable:!0,get:B})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,U){if(1&U&&(Q=F(Q)),8&U)return Q;if(4&U&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&U&&"string"!=typeof Q)for(var s in Q)F.d(B,s,function(U){return Q[U]}.bind(null,s));return B},F.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(U,"a",U),U},F.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},F.p="/",F(F.s=0)}([function(Q,U,F){F(3),Q.exports=F(2)},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NvbXBvbmVudHMvc2xvdC1tYWNoaW5lL3Nsb3QtbWFjaGluZS5zdHlsZS5zY3NzP2Q0ODciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL21haW4uc2Nzcz85NDM1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/app/utils/dom.util.js\nfunction createElement() {\n  var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var angle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var element = document.createElement('DIV');\n  element.className = className;\n\n  if (typeof content === 'string') {\n    element.innerText = content;\n  } else {\n    element.appendChild(content);\n  }\n\n  if (angle !== null) {\n    element.style.transform = \"rotate(\".concat(angle, \"deg)\");\n  }\n\n  return element;\n}\n// CONCATENATED MODULE: ./src/app/utils/animation.util.js\nvar dynamicStyles = null;\nfunction addAnimation(name, body) {\n  if (!dynamicStyles) {\n    dynamicStyles = document.createElement('style');\n    dynamicStyles.type = 'text/css';\n    document.head.appendChild(dynamicStyles);\n  }\n\n  dynamicStyles.sheet.insertRule(\"@keyframes \".concat(name, \" {\\n        \").concat(body, \"\\n    }\"), dynamicStyles.length);\n}\nfunction resetAnimations() {\n  if (dynamicStyles) {\n    dynamicStyles.remove();\n    dynamicStyles = null;\n  }\n}\nfunction stopAt(name, start, end, alpha, speed) {\n  var angles = [start, end - alpha * 0.25, end + alpha * 0.125, end - alpha * 0.0625, end + alpha * 0.03125, end - alpha * 0.015625, end];\n  var previousAngle = start;\n  var total = 0;\n  var time = angles.map(function (angle) {\n    var delta = Math.max(Math.abs(angle - previousAngle) / Math.abs(speed), 10);\n    previousAngle = angle;\n    total += delta;\n    return delta;\n  });\n  var previousPercent = 0;\n  var percent = time.map(function (t) {\n    var p = previousPercent + 100 * (t / total);\n    previousPercent = p;\n    return p;\n  }); // TODO: Handle opacity here!\n\n  var animation = percent.map(function (p, i) {\n    return \"\".concat(Math.round(p), \"% { transform: rotate(\").concat(angles[i].toFixed(2), \"deg); }\");\n  }).join('\\n');\n  addAnimation(name, animation);\n  return total;\n}\n// CONCATENATED MODULE: ./src/app/utils/array.util.js\nfunction shuffle(a) {\n  for (var i = a.length - 1; i > 0; --i) {\n    var j = Math.floor(Math.random() * (i + 1)); // eslint-disable-next-line no-param-reassign\n\n    var _ref = [a[j], a[i]];\n    a[i] = _ref[0];\n    a[j] = _ref[1];\n  }\n\n  return a;\n}\n// CONCATENATED MODULE: ./src/app/constants/symbols.constants.js\nvar SYMBOLS_CLASSIC = ['💀', '🍋', '🍊', '🍉', '🍇', '🍓', '🍒', '🔔', '🍀', '💎'];\nvar SYMBOLS_CHRISTMAS = ['⛄', '🦌', '🎄', '🎀', '🎁', '🎆', '🍾', '🔔', '🎅', '🌟'];\nvar SYMBOLS_HALLOWEEN = ['🌚', '🐺', '🎃', '🧠', '👹', '👽', '👻', '🧟‍', '🧛‍', '💀'];\nvar SYMBOLS_ANIMALS = ['🐭', '🐱', '🦀', '🐞', '🐓', '🐍', '🐟', '🐸', '🦊‍', '🦁'];\nvar SYMBOLS_SPORTS = ['⚽', '🏀', '🏈', '⚾', '🎾', '🏐', '🏉', '🎱', '🥊‍', '🎯'];\nvar ALL_SYMBOLS = [SYMBOLS_CLASSIC, SYMBOLS_CHRISTMAS, SYMBOLS_HALLOWEEN, SYMBOLS_ANIMALS, SYMBOLS_SPORTS];\nvar SYMBOLS_RANDOM = ALL_SYMBOLS[Math.random() * ALL_SYMBOLS.length | 0];\n// CONCATENATED MODULE: ./src/app/constants/vibration.constants.js\nvar VIBRATION_STOP = [200, 50, 50, 50, 50, 25, 25, 25, 25, 25, 25, 25, 25];\nvar VIBRATION_START = [25, 25, 25, 25, 25, 25, 25, 25, 50, 50, 50, 50, 50];\n// EXTERNAL MODULE: ./src/app/components/slot-machine/slot-machine.style.scss\nvar slot_machine_style = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/app/components/slot-machine/slot-machine.component.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\nvar slot_machine_component_SlotMachine =\n/*#__PURE__*/\nfunction () {\n  // Elements:\n  // Visual config:\n  // State:\n  function SlotMachine() {\n    _classCallCheck(this, SlotMachine);\n\n    this.root = document.querySelector(SlotMachine.SELECTOR_BASE);\n    this.display = document.querySelector(SlotMachine.SELECTOR_DISPLAY);\n    this.reels = [];\n    this.shadows = [4, 3, 3, 2, 1];\n    this.symbols = _toConsumableArray(SYMBOLS_RANDOM);\n    this.alpha = 360 / SYMBOLS_RANDOM.length;\n    this.currentReel = null;\n    this.speed = -0.75;\n    this.lastUpdate = 0;\n    this.init();\n    document.onclick = this.handleClick.bind(this);\n  }\n\n  _createClass(SlotMachine, [{\n    key: \"init\",\n    value: function init() {\n      var alpha = this.alpha,\n          shadows = this.shadows,\n          symbols = this.symbols;\n      this.reels = Array.from(document.querySelectorAll(SlotMachine.SELECTOR_REEL)).slice(0, -1).map(function (reel, ireel) {\n        shuffle(symbols);\n        symbols.forEach(function (symbol, isymbol) {\n          var slotText = createElement('sm__cellFigure', symbol);\n          var slot = createElement('sm__cell', slotText, isymbol * alpha);\n          reel.appendChild(slot);\n          var totalShadows = shadows[ireel];\n          var beta = 1 / (totalShadows + 1);\n\n          for (var ishadow = 1; ishadow <= totalShadows; ++ishadow) {\n            reel.appendChild(createElement(\"sm__cell sm__shadow sm__shadow-\".concat(ishadow), slotText.cloneNode(true), (isymbol + beta * ishadow) * alpha));\n          }\n        });\n        return {\n          element: reel,\n          style: reel.style,\n          angle: 0\n        };\n      });\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this = this;\n\n      var reels = this.reels,\n          root = this.root;\n      resetAnimations();\n      reels.map(function (reel) {\n        return reel.element.classList.remove('is-stop');\n      });\n      root.style = '';\n      this.currentReel = 0;\n      this.lastUpdate = performance.now();\n      window.navigator.vibrate(VIBRATION_START);\n      requestAnimationFrame(function () {\n        return _this.tick();\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.currentReel = null; // TODO: 32 is a css variable!\n\n      this.root.style.transform = \"scale(\".concat((window.innerWidth - 32) / this.display.offsetWidth, \")\"); // TODO: Check win\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      var _this2 = this;\n\n      var reels = this.reels,\n          speed = this.speed,\n          currentReel = this.currentReel,\n          lastUpdate = this.lastUpdate;\n      var now = performance.now();\n      var deltaTime = now - lastUpdate;\n      var deltaAlpha = deltaTime * speed;\n\n      if (currentReel === null) {\n        return;\n      }\n\n      this.lastUpdate = now;\n\n      for (var i = reels.length - 1; i >= currentReel; --i) {\n        var reel = reels[i];\n        var angle = reel.angle = (360 + (reel.angle + deltaAlpha)) % 360;\n        reel.style.transform = \"rotate(\".concat(angle, \"deg)\");\n      }\n\n      requestAnimationFrame(function () {\n        return _this2.tick();\n      });\n    }\n  }, {\n    key: \"stopReel\",\n    value: function stopReel(reelIndex) {\n      var alpha = this.alpha,\n          speed = this.speed;\n      var deltaAlpha = (performance.now() - this.lastUpdate) * speed;\n      var reel = this.reels[reelIndex];\n      var angle = (360 - reel.angle - deltaAlpha) % 360;\n      var index = Math.ceil(angle / alpha);\n      var stopAngle = index * alpha;\n      var animationName = \"stop-\".concat(reelIndex);\n      var animationDuration = stopAt(animationName, (360 - angle) % 360, (360 - stopAngle) % 360, alpha, speed) * 5;\n      window.navigator.vibrate(VIBRATION_STOP);\n      reel.style.animation = \"\".concat(animationName, \" \").concat(animationDuration, \"ms ease-out forwards\");\n      reel.element.classList.add('is-stop');\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      var currentReel = this.currentReel;\n\n      if (currentReel === null) {\n        this.start();\n      } else {\n        ++this.currentReel;\n        this.stopReel(currentReel);\n\n        if (currentReel === this.reels.length - 1) {\n          this.stop();\n        }\n      }\n    }\n  }]);\n\n  return SlotMachine;\n}();\nslot_machine_component_SlotMachine.SELECTOR_BASE = '.sm__base';\nslot_machine_component_SlotMachine.SELECTOR_DISPLAY = '.sm__display';\nslot_machine_component_SlotMachine.SELECTOR_REEL = '.sm__reel';\n// CONCATENATED MODULE: ./src/app/main.js\n // eslint-disable-next-line no-new\n\nnew slot_machine_component_SlotMachine();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")}]);